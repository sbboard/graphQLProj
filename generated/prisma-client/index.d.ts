// Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  hero: (where?: HeroWhereInput) => Promise<boolean>;
  team: (where?: TeamWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  hero: (where: HeroWhereUniqueInput) => HeroPromise;
  heroes: (
    args?: {
      where?: HeroWhereInput;
      orderBy?: HeroOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Hero>;
  heroesConnection: (
    args?: {
      where?: HeroWhereInput;
      orderBy?: HeroOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => HeroConnectionPromise;
  team: (where: TeamWhereUniqueInput) => TeamPromise;
  teams: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Team>;
  teamsConnection: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TeamConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createHero: (data: HeroCreateInput) => HeroPromise;
  updateHero: (
    args: { data: HeroUpdateInput; where: HeroWhereUniqueInput }
  ) => HeroPromise;
  updateManyHeroes: (
    args: { data: HeroUpdateManyMutationInput; where?: HeroWhereInput }
  ) => BatchPayloadPromise;
  upsertHero: (
    args: {
      where: HeroWhereUniqueInput;
      create: HeroCreateInput;
      update: HeroUpdateInput;
    }
  ) => HeroPromise;
  deleteHero: (where: HeroWhereUniqueInput) => HeroPromise;
  deleteManyHeroes: (where?: HeroWhereInput) => BatchPayloadPromise;
  createTeam: (data: TeamCreateInput) => TeamPromise;
  updateTeam: (
    args: { data: TeamUpdateInput; where: TeamWhereUniqueInput }
  ) => TeamPromise;
  updateManyTeams: (
    args: { data: TeamUpdateManyMutationInput; where?: TeamWhereInput }
  ) => BatchPayloadPromise;
  upsertTeam: (
    args: {
      where: TeamWhereUniqueInput;
      create: TeamCreateInput;
      update: TeamUpdateInput;
    }
  ) => TeamPromise;
  deleteTeam: (where: TeamWhereUniqueInput) => TeamPromise;
  deleteManyTeams: (where?: TeamWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  hero: (
    where?: HeroSubscriptionWhereInput
  ) => HeroSubscriptionPayloadSubscription;
  team: (
    where?: TeamSubscriptionWhereInput
  ) => TeamSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TeamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type HeroOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "powerLvl_ASC"
  | "powerLvl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface TeamUpdateWithoutMembersDataInput {
  name?: String;
}

export type HeroWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface TeamUpdateManyWithWhereNestedInput {
  where: TeamScalarWhereInput;
  data: TeamUpdateManyDataInput;
}

export interface HeroWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  teams_every?: TeamWhereInput;
  teams_some?: TeamWhereInput;
  teams_none?: TeamWhereInput;
  powerLvl?: Int;
  powerLvl_not?: Int;
  powerLvl_in?: Int[] | Int;
  powerLvl_not_in?: Int[] | Int;
  powerLvl_lt?: Int;
  powerLvl_lte?: Int;
  powerLvl_gt?: Int;
  powerLvl_gte?: Int;
  AND?: HeroWhereInput[] | HeroWhereInput;
  OR?: HeroWhereInput[] | HeroWhereInput;
  NOT?: HeroWhereInput[] | HeroWhereInput;
}

export interface TeamUpdateManyDataInput {
  name?: String;
}

export interface TeamWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  members_every?: HeroWhereInput;
  members_some?: HeroWhereInput;
  members_none?: HeroWhereInput;
  AND?: TeamWhereInput[] | TeamWhereInput;
  OR?: TeamWhereInput[] | TeamWhereInput;
  NOT?: TeamWhereInput[] | TeamWhereInput;
}

export interface TeamCreateWithoutMembersInput {
  name: String;
}

export interface TeamCreateInput {
  name: String;
  members?: HeroCreateManyWithoutTeamsInput;
}

export interface HeroUpdateInput {
  name?: String;
  teams?: TeamUpdateManyWithoutMembersInput;
  powerLvl?: Int;
}

export interface HeroUpdateManyMutationInput {
  name?: String;
  powerLvl?: Int;
}

export interface TeamUpdateManyWithoutMembersInput {
  create?: TeamCreateWithoutMembersInput[] | TeamCreateWithoutMembersInput;
  delete?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  connect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  set?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  disconnect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  update?:
    | TeamUpdateWithWhereUniqueWithoutMembersInput[]
    | TeamUpdateWithWhereUniqueWithoutMembersInput;
  upsert?:
    | TeamUpsertWithWhereUniqueWithoutMembersInput[]
    | TeamUpsertWithWhereUniqueWithoutMembersInput;
  deleteMany?: TeamScalarWhereInput[] | TeamScalarWhereInput;
  updateMany?:
    | TeamUpdateManyWithWhereNestedInput[]
    | TeamUpdateManyWithWhereNestedInput;
}

export interface HeroSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: HeroWhereInput;
  AND?: HeroSubscriptionWhereInput[] | HeroSubscriptionWhereInput;
  OR?: HeroSubscriptionWhereInput[] | HeroSubscriptionWhereInput;
  NOT?: HeroSubscriptionWhereInput[] | HeroSubscriptionWhereInput;
}

export interface TeamUpdateWithWhereUniqueWithoutMembersInput {
  where: TeamWhereUniqueInput;
  data: TeamUpdateWithoutMembersDataInput;
}

export interface HeroUpdateManyDataInput {
  name?: String;
  powerLvl?: Int;
}

export interface HeroUpdateWithoutTeamsDataInput {
  name?: String;
  powerLvl?: Int;
}

export interface HeroUpdateManyWithWhereNestedInput {
  where: HeroScalarWhereInput;
  data: HeroUpdateManyDataInput;
}

export interface TeamUpsertWithWhereUniqueWithoutMembersInput {
  where: TeamWhereUniqueInput;
  update: TeamUpdateWithoutMembersDataInput;
  create: TeamCreateWithoutMembersInput;
}

export interface HeroUpsertWithWhereUniqueWithoutTeamsInput {
  where: HeroWhereUniqueInput;
  update: HeroUpdateWithoutTeamsDataInput;
  create: HeroCreateWithoutTeamsInput;
}

export interface TeamScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: TeamScalarWhereInput[] | TeamScalarWhereInput;
  OR?: TeamScalarWhereInput[] | TeamScalarWhereInput;
  NOT?: TeamScalarWhereInput[] | TeamScalarWhereInput;
}

export interface HeroCreateInput {
  name: String;
  teams?: TeamCreateManyWithoutMembersInput;
  powerLvl: Int;
}

export interface HeroUpdateWithWhereUniqueWithoutTeamsInput {
  where: HeroWhereUniqueInput;
  data: HeroUpdateWithoutTeamsDataInput;
}

export interface TeamSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TeamWhereInput;
  AND?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  OR?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  NOT?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
}

export type TeamWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface HeroCreateManyWithoutTeamsInput {
  create?: HeroCreateWithoutTeamsInput[] | HeroCreateWithoutTeamsInput;
  connect?: HeroWhereUniqueInput[] | HeroWhereUniqueInput;
}

export interface HeroCreateWithoutTeamsInput {
  name: String;
  powerLvl: Int;
}

export interface TeamUpdateInput {
  name?: String;
  members?: HeroUpdateManyWithoutTeamsInput;
}

export interface HeroUpdateManyWithoutTeamsInput {
  create?: HeroCreateWithoutTeamsInput[] | HeroCreateWithoutTeamsInput;
  delete?: HeroWhereUniqueInput[] | HeroWhereUniqueInput;
  connect?: HeroWhereUniqueInput[] | HeroWhereUniqueInput;
  set?: HeroWhereUniqueInput[] | HeroWhereUniqueInput;
  disconnect?: HeroWhereUniqueInput[] | HeroWhereUniqueInput;
  update?:
    | HeroUpdateWithWhereUniqueWithoutTeamsInput[]
    | HeroUpdateWithWhereUniqueWithoutTeamsInput;
  upsert?:
    | HeroUpsertWithWhereUniqueWithoutTeamsInput[]
    | HeroUpsertWithWhereUniqueWithoutTeamsInput;
  deleteMany?: HeroScalarWhereInput[] | HeroScalarWhereInput;
  updateMany?:
    | HeroUpdateManyWithWhereNestedInput[]
    | HeroUpdateManyWithWhereNestedInput;
}

export interface HeroScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  powerLvl?: Int;
  powerLvl_not?: Int;
  powerLvl_in?: Int[] | Int;
  powerLvl_not_in?: Int[] | Int;
  powerLvl_lt?: Int;
  powerLvl_lte?: Int;
  powerLvl_gt?: Int;
  powerLvl_gte?: Int;
  AND?: HeroScalarWhereInput[] | HeroScalarWhereInput;
  OR?: HeroScalarWhereInput[] | HeroScalarWhereInput;
  NOT?: HeroScalarWhereInput[] | HeroScalarWhereInput;
}

export interface TeamUpdateManyMutationInput {
  name?: String;
}

export interface TeamCreateManyWithoutMembersInput {
  create?: TeamCreateWithoutMembersInput[] | TeamCreateWithoutMembersInput;
  connect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface TeamPreviousValues {
  id: ID_Output;
  name: String;
}

export interface TeamPreviousValuesPromise
  extends Promise<TeamPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface TeamPreviousValuesSubscription
  extends Promise<AsyncIterator<TeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHero {
  count: Int;
}

export interface AggregateHeroPromise
  extends Promise<AggregateHero>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHeroSubscription
  extends Promise<AsyncIterator<AggregateHero>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Hero {
  id: ID_Output;
  name: String;
  powerLvl: Int;
}

export interface HeroPromise extends Promise<Hero>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  teams: <T = FragmentableArray<Team>>(
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  powerLvl: () => Promise<Int>;
}

export interface HeroSubscription
  extends Promise<AsyncIterator<Hero>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  teams: <T = Promise<AsyncIterator<TeamSubscription>>>(
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  powerLvl: () => Promise<AsyncIterator<Int>>;
}

export interface HeroEdge {
  node: Hero;
  cursor: String;
}

export interface HeroEdgePromise extends Promise<HeroEdge>, Fragmentable {
  node: <T = HeroPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HeroEdgeSubscription
  extends Promise<AsyncIterator<HeroEdge>>,
    Fragmentable {
  node: <T = HeroSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface HeroConnection {
  pageInfo: PageInfo;
  edges: HeroEdge[];
}

export interface HeroConnectionPromise
  extends Promise<HeroConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HeroEdge>>() => T;
  aggregate: <T = AggregateHeroPromise>() => T;
}

export interface HeroConnectionSubscription
  extends Promise<AsyncIterator<HeroConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HeroEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHeroSubscription>() => T;
}

export interface HeroPreviousValues {
  id: ID_Output;
  name: String;
  powerLvl: Int;
}

export interface HeroPreviousValuesPromise
  extends Promise<HeroPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  powerLvl: () => Promise<Int>;
}

export interface HeroPreviousValuesSubscription
  extends Promise<AsyncIterator<HeroPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  powerLvl: () => Promise<AsyncIterator<Int>>;
}

export interface HeroSubscriptionPayload {
  mutation: MutationType;
  node: Hero;
  updatedFields: String[];
  previousValues: HeroPreviousValues;
}

export interface HeroSubscriptionPayloadPromise
  extends Promise<HeroSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HeroPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HeroPreviousValuesPromise>() => T;
}

export interface HeroSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HeroSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HeroSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HeroPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface TeamSubscriptionPayload {
  mutation: MutationType;
  node: Team;
  updatedFields: String[];
  previousValues: TeamPreviousValues;
}

export interface TeamSubscriptionPayloadPromise
  extends Promise<TeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TeamPreviousValuesPromise>() => T;
}

export interface TeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TeamPreviousValuesSubscription>() => T;
}

export interface Team {
  id: ID_Output;
  name: String;
}

export interface TeamPromise extends Promise<Team>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  members: <T = FragmentableArray<Hero>>(
    args?: {
      where?: HeroWhereInput;
      orderBy?: HeroOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TeamSubscription
  extends Promise<AsyncIterator<Team>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  members: <T = Promise<AsyncIterator<HeroSubscription>>>(
    args?: {
      where?: HeroWhereInput;
      orderBy?: HeroOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TeamConnection {
  pageInfo: PageInfo;
  edges: TeamEdge[];
}

export interface TeamConnectionPromise
  extends Promise<TeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TeamEdge>>() => T;
  aggregate: <T = AggregateTeamPromise>() => T;
}

export interface TeamConnectionSubscription
  extends Promise<AsyncIterator<TeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeamSubscription>() => T;
}

export interface TeamEdge {
  node: Team;
  cursor: String;
}

export interface TeamEdgePromise extends Promise<TeamEdge>, Fragmentable {
  node: <T = TeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TeamEdgeSubscription
  extends Promise<AsyncIterator<TeamEdge>>,
    Fragmentable {
  node: <T = TeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTeam {
  count: Int;
}

export interface AggregateTeamPromise
  extends Promise<AggregateTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeamSubscription
  extends Promise<AsyncIterator<AggregateTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Hero",
    embedded: false
  },
  {
    name: "Team",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
