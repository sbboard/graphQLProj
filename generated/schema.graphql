### This file was autogenerated by Nexus 0.11.6
### Do not make changes to this file directly


type Baddie {
  HP: Int!
  id: ID!
  name: String!
  nemesis: Hero
  powerLvl: Int!
}

input BaddieCreateInput {
  HP: Int!
  name: String!
  nemesis: HeroCreateOneWithoutNemesisInput
  powerLvl: Int!
}

input BaddieCreateOneWithoutNemesisInput {
  connect: BaddieWhereUniqueInput
  create: BaddieCreateWithoutNemesisInput
}

input BaddieCreateWithoutNemesisInput {
  HP: Int!
  name: String!
  powerLvl: Int!
}

input BaddieUpdateInput {
  HP: Int
  name: String
  nemesis: HeroUpdateOneWithoutNemesisInput
  powerLvl: Int
}

input BaddieUpdateManyMutationInput {
  HP: Int
  name: String
  powerLvl: Int
}

input BaddieUpdateOneWithoutNemesisInput {
  connect: BaddieWhereUniqueInput
  create: BaddieCreateWithoutNemesisInput
  delete: Boolean
  disconnect: Boolean
  update: BaddieUpdateWithoutNemesisDataInput
  upsert: BaddieUpsertWithoutNemesisInput
}

input BaddieUpdateWithoutNemesisDataInput {
  HP: Int
  name: String
  powerLvl: Int
}

input BaddieUpsertWithoutNemesisInput {
  create: BaddieCreateWithoutNemesisInput!
  update: BaddieUpdateWithoutNemesisDataInput!
}

input BaddieWhereInput {
  AND: [BaddieWhereInput!]
  HP: Int
  HP_gt: Int
  HP_gte: Int
  HP_in: [Int!]
  HP_lt: Int
  HP_lte: Int
  HP_not: Int
  HP_not_in: [Int!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  nemesis: HeroWhereInput
  NOT: [BaddieWhereInput!]
  OR: [BaddieWhereInput!]
  powerLvl: Int
  powerLvl_gt: Int
  powerLvl_gte: Int
  powerLvl_in: [Int!]
  powerLvl_lt: Int
  powerLvl_lte: Int
  powerLvl_not: Int
  powerLvl_not_in: [Int!]
}

input BaddieWhereUniqueInput {
  id: ID
  name: String
}

type BatchPayload {
  count: Long!
}

type Hero {
  HP: Int!
  id: ID!
  name: String!
  nemesis: Baddie
  powerLvl: Int!
  teams(after: String, before: String, first: Int, last: Int, orderBy: TeamOrderByInput, skip: Int, where: TeamWhereInput): [Team!]
}

input HeroCreateInput {
  HP: Int!
  name: String!
  nemesis: BaddieCreateOneWithoutNemesisInput
  powerLvl: Int!
  teams: TeamCreateManyWithoutMembersInput
}

input HeroCreateManyWithoutTeamsInput {
  connect: [HeroWhereUniqueInput!]
  create: [HeroCreateWithoutTeamsInput!]
}

input HeroCreateOneWithoutNemesisInput {
  connect: HeroWhereUniqueInput
  create: HeroCreateWithoutNemesisInput
}

input HeroCreateWithoutNemesisInput {
  HP: Int!
  name: String!
  powerLvl: Int!
  teams: TeamCreateManyWithoutMembersInput
}

input HeroCreateWithoutTeamsInput {
  HP: Int!
  name: String!
  nemesis: BaddieCreateOneWithoutNemesisInput
  powerLvl: Int!
}

enum HeroOrderByInput {
  createdAt_ASC
  createdAt_DESC
  HP_ASC
  HP_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  powerLvl_ASC
  powerLvl_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input HeroScalarWhereInput {
  AND: [HeroScalarWhereInput!]
  HP: Int
  HP_gt: Int
  HP_gte: Int
  HP_in: [Int!]
  HP_lt: Int
  HP_lte: Int
  HP_not: Int
  HP_not_in: [Int!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [HeroScalarWhereInput!]
  OR: [HeroScalarWhereInput!]
  powerLvl: Int
  powerLvl_gt: Int
  powerLvl_gte: Int
  powerLvl_in: [Int!]
  powerLvl_lt: Int
  powerLvl_lte: Int
  powerLvl_not: Int
  powerLvl_not_in: [Int!]
}

input HeroUpdateInput {
  HP: Int
  name: String
  nemesis: BaddieUpdateOneWithoutNemesisInput
  powerLvl: Int
  teams: TeamUpdateManyWithoutMembersInput
}

input HeroUpdateManyDataInput {
  HP: Int
  name: String
  powerLvl: Int
}

input HeroUpdateManyMutationInput {
  HP: Int
  name: String
  powerLvl: Int
}

input HeroUpdateManyWithoutTeamsInput {
  connect: [HeroWhereUniqueInput!]
  create: [HeroCreateWithoutTeamsInput!]
  delete: [HeroWhereUniqueInput!]
  deleteMany: [HeroScalarWhereInput!]
  disconnect: [HeroWhereUniqueInput!]
  set: [HeroWhereUniqueInput!]
  update: [HeroUpdateWithWhereUniqueWithoutTeamsInput!]
  updateMany: [HeroUpdateManyWithWhereNestedInput!]
  upsert: [HeroUpsertWithWhereUniqueWithoutTeamsInput!]
}

input HeroUpdateManyWithWhereNestedInput {
  data: HeroUpdateManyDataInput!
  where: HeroScalarWhereInput!
}

input HeroUpdateOneWithoutNemesisInput {
  connect: HeroWhereUniqueInput
  create: HeroCreateWithoutNemesisInput
  delete: Boolean
  disconnect: Boolean
  update: HeroUpdateWithoutNemesisDataInput
  upsert: HeroUpsertWithoutNemesisInput
}

input HeroUpdateWithoutNemesisDataInput {
  HP: Int
  name: String
  powerLvl: Int
  teams: TeamUpdateManyWithoutMembersInput
}

input HeroUpdateWithoutTeamsDataInput {
  HP: Int
  name: String
  nemesis: BaddieUpdateOneWithoutNemesisInput
  powerLvl: Int
}

input HeroUpdateWithWhereUniqueWithoutTeamsInput {
  data: HeroUpdateWithoutTeamsDataInput!
  where: HeroWhereUniqueInput!
}

input HeroUpsertWithoutNemesisInput {
  create: HeroCreateWithoutNemesisInput!
  update: HeroUpdateWithoutNemesisDataInput!
}

input HeroUpsertWithWhereUniqueWithoutTeamsInput {
  create: HeroCreateWithoutTeamsInput!
  update: HeroUpdateWithoutTeamsDataInput!
  where: HeroWhereUniqueInput!
}

input HeroWhereInput {
  AND: [HeroWhereInput!]
  HP: Int
  HP_gt: Int
  HP_gte: Int
  HP_in: [Int!]
  HP_lt: Int
  HP_lte: Int
  HP_not: Int
  HP_not_in: [Int!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  nemesis: BaddieWhereInput
  NOT: [HeroWhereInput!]
  OR: [HeroWhereInput!]
  powerLvl: Int
  powerLvl_gt: Int
  powerLvl_gte: Int
  powerLvl_in: [Int!]
  powerLvl_lt: Int
  powerLvl_lte: Int
  powerLvl_not: Int
  powerLvl_not_in: [Int!]
  teams_every: TeamWhereInput
  teams_none: TeamWhereInput
  teams_some: TeamWhereInput
}

input HeroWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Mutation {
  createBaddie(data: BaddieCreateInput!): Baddie!
  createHero(data: HeroCreateInput!): Hero!
  createTeam(data: TeamCreateInput!): Team!
  deleteBaddie(where: BaddieWhereUniqueInput!): Baddie
  deleteHero(where: HeroWhereUniqueInput!): Hero
  deleteManyBaddies(where: BaddieWhereInput): BatchPayload!
  deleteManyHeroes(where: HeroWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  deleteTeam(where: TeamWhereUniqueInput!): Team
  makeNewTeam(name: String): Team!
  updateBaddie(data: BaddieUpdateInput!, where: BaddieWhereUniqueInput!): Baddie
  updateHero(data: HeroUpdateInput!, where: HeroWhereUniqueInput!): Hero
  updateManyBaddies(data: BaddieUpdateManyMutationInput!, where: BaddieWhereInput): BatchPayload!
  updateManyHeroes(data: HeroUpdateManyMutationInput!, where: HeroWhereInput): BatchPayload!
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  upsertBaddie(create: BaddieCreateInput!, update: BaddieUpdateInput!, where: BaddieWhereUniqueInput!): Baddie!
  upsertHero(create: HeroCreateInput!, update: HeroUpdateInput!, where: HeroWhereUniqueInput!): Hero!
  upsertTeam(create: TeamCreateInput!, update: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team!
}

type Query {
  hello(name: String): String!
}

type Team {
  id: ID!
  members(after: String, before: String, first: Int, last: Int, orderBy: HeroOrderByInput, skip: Int, where: HeroWhereInput): [Hero!]
  name: String!
}

input TeamCreateInput {
  members: HeroCreateManyWithoutTeamsInput
  name: String!
}

input TeamCreateManyWithoutMembersInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutMembersInput!]
}

input TeamCreateWithoutMembersInput {
  name: String!
}

enum TeamOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TeamScalarWhereInput {
  AND: [TeamScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [TeamScalarWhereInput!]
  OR: [TeamScalarWhereInput!]
}

input TeamUpdateInput {
  members: HeroUpdateManyWithoutTeamsInput
  name: String
}

input TeamUpdateManyDataInput {
  name: String
}

input TeamUpdateManyMutationInput {
  name: String
}

input TeamUpdateManyWithoutMembersInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutMembersInput!]
  delete: [TeamWhereUniqueInput!]
  deleteMany: [TeamScalarWhereInput!]
  disconnect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutMembersInput!]
  updateMany: [TeamUpdateManyWithWhereNestedInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutMembersInput!]
}

input TeamUpdateManyWithWhereNestedInput {
  data: TeamUpdateManyDataInput!
  where: TeamScalarWhereInput!
}

input TeamUpdateWithoutMembersDataInput {
  name: String
}

input TeamUpdateWithWhereUniqueWithoutMembersInput {
  data: TeamUpdateWithoutMembersDataInput!
  where: TeamWhereUniqueInput!
}

input TeamUpsertWithWhereUniqueWithoutMembersInput {
  create: TeamCreateWithoutMembersInput!
  update: TeamUpdateWithoutMembersDataInput!
  where: TeamWhereUniqueInput!
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  members_every: HeroWhereInput
  members_none: HeroWhereInput
  members_some: HeroWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [TeamWhereInput!]
  OR: [TeamWhereInput!]
}

input TeamWhereUniqueInput {
  id: ID
  name: String
}
