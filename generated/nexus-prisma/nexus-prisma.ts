/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Hero: HeroObject
      Team: TeamObject
      Baddie: BaddieObject
      HeroConnection: HeroConnectionObject
      PageInfo: PageInfoObject
      HeroEdge: HeroEdgeObject
      AggregateHero: AggregateHeroObject
      TeamConnection: TeamConnectionObject
      TeamEdge: TeamEdgeObject
      AggregateTeam: AggregateTeamObject
      BaddieConnection: BaddieConnectionObject
      BaddieEdge: BaddieEdgeObject
      AggregateBaddie: AggregateBaddieObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      HeroSubscriptionPayload: HeroSubscriptionPayloadObject
      HeroPreviousValues: HeroPreviousValuesObject
      TeamSubscriptionPayload: TeamSubscriptionPayloadObject
      TeamPreviousValues: TeamPreviousValuesObject
      BaddieSubscriptionPayload: BaddieSubscriptionPayloadObject
      BaddiePreviousValues: BaddiePreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Hero: HeroFieldDetails
      Team: TeamFieldDetails
      Baddie: BaddieFieldDetails
      HeroConnection: HeroConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      HeroEdge: HeroEdgeFieldDetails
      AggregateHero: AggregateHeroFieldDetails
      TeamConnection: TeamConnectionFieldDetails
      TeamEdge: TeamEdgeFieldDetails
      AggregateTeam: AggregateTeamFieldDetails
      BaddieConnection: BaddieConnectionFieldDetails
      BaddieEdge: BaddieEdgeFieldDetails
      AggregateBaddie: AggregateBaddieFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      HeroSubscriptionPayload: HeroSubscriptionPayloadFieldDetails
      HeroPreviousValues: HeroPreviousValuesFieldDetails
      TeamSubscriptionPayload: TeamSubscriptionPayloadFieldDetails
      TeamPreviousValues: TeamPreviousValuesFieldDetails
      BaddieSubscriptionPayload: BaddieSubscriptionPayloadFieldDetails
      BaddiePreviousValues: BaddiePreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      HeroWhereUniqueInput: HeroWhereUniqueInputInputObject
      TeamWhereInput: TeamWhereInputInputObject
      HeroWhereInput: HeroWhereInputInputObject
      BaddieWhereInput: BaddieWhereInputInputObject
      TeamWhereUniqueInput: TeamWhereUniqueInputInputObject
      BaddieWhereUniqueInput: BaddieWhereUniqueInputInputObject
      HeroCreateInput: HeroCreateInputInputObject
      TeamCreateManyWithoutMembersInput: TeamCreateManyWithoutMembersInputInputObject
      TeamCreateWithoutMembersInput: TeamCreateWithoutMembersInputInputObject
      BaddieCreateOneWithoutNemesisInput: BaddieCreateOneWithoutNemesisInputInputObject
      BaddieCreateWithoutNemesisInput: BaddieCreateWithoutNemesisInputInputObject
      HeroUpdateInput: HeroUpdateInputInputObject
      TeamUpdateManyWithoutMembersInput: TeamUpdateManyWithoutMembersInputInputObject
      TeamUpdateWithWhereUniqueWithoutMembersInput: TeamUpdateWithWhereUniqueWithoutMembersInputInputObject
      TeamUpdateWithoutMembersDataInput: TeamUpdateWithoutMembersDataInputInputObject
      TeamUpsertWithWhereUniqueWithoutMembersInput: TeamUpsertWithWhereUniqueWithoutMembersInputInputObject
      TeamScalarWhereInput: TeamScalarWhereInputInputObject
      TeamUpdateManyWithWhereNestedInput: TeamUpdateManyWithWhereNestedInputInputObject
      TeamUpdateManyDataInput: TeamUpdateManyDataInputInputObject
      BaddieUpdateOneWithoutNemesisInput: BaddieUpdateOneWithoutNemesisInputInputObject
      BaddieUpdateWithoutNemesisDataInput: BaddieUpdateWithoutNemesisDataInputInputObject
      BaddieUpsertWithoutNemesisInput: BaddieUpsertWithoutNemesisInputInputObject
      HeroUpdateManyMutationInput: HeroUpdateManyMutationInputInputObject
      TeamCreateInput: TeamCreateInputInputObject
      HeroCreateManyWithoutTeamsInput: HeroCreateManyWithoutTeamsInputInputObject
      HeroCreateWithoutTeamsInput: HeroCreateWithoutTeamsInputInputObject
      TeamUpdateInput: TeamUpdateInputInputObject
      HeroUpdateManyWithoutTeamsInput: HeroUpdateManyWithoutTeamsInputInputObject
      HeroUpdateWithWhereUniqueWithoutTeamsInput: HeroUpdateWithWhereUniqueWithoutTeamsInputInputObject
      HeroUpdateWithoutTeamsDataInput: HeroUpdateWithoutTeamsDataInputInputObject
      HeroUpsertWithWhereUniqueWithoutTeamsInput: HeroUpsertWithWhereUniqueWithoutTeamsInputInputObject
      HeroScalarWhereInput: HeroScalarWhereInputInputObject
      HeroUpdateManyWithWhereNestedInput: HeroUpdateManyWithWhereNestedInputInputObject
      HeroUpdateManyDataInput: HeroUpdateManyDataInputInputObject
      TeamUpdateManyMutationInput: TeamUpdateManyMutationInputInputObject
      BaddieCreateInput: BaddieCreateInputInputObject
      HeroCreateOneWithoutNemesisInput: HeroCreateOneWithoutNemesisInputInputObject
      HeroCreateWithoutNemesisInput: HeroCreateWithoutNemesisInputInputObject
      BaddieUpdateInput: BaddieUpdateInputInputObject
      HeroUpdateOneWithoutNemesisInput: HeroUpdateOneWithoutNemesisInputInputObject
      HeroUpdateWithoutNemesisDataInput: HeroUpdateWithoutNemesisDataInputInputObject
      HeroUpsertWithoutNemesisInput: HeroUpsertWithoutNemesisInputInputObject
      BaddieUpdateManyMutationInput: BaddieUpdateManyMutationInputInputObject
      HeroSubscriptionWhereInput: HeroSubscriptionWhereInputInputObject
      TeamSubscriptionWhereInput: TeamSubscriptionWhereInputInputObject
      BaddieSubscriptionWhereInput: BaddieSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    TeamOrderByInput: TeamOrderByInputValues,
    HeroOrderByInput: HeroOrderByInputValues,
    BaddieOrderByInput: BaddieOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'hero', args?: QueryHeroArgs[] | false, alias?: string  } 
  | { name: 'heroes', args?: QueryHeroesArgs[] | false, alias?: string  } 
  | { name: 'heroesConnection', args?: QueryHeroesConnectionArgs[] | false, alias?: string  } 
  | { name: 'team', args?: QueryTeamArgs[] | false, alias?: string  } 
  | { name: 'teams', args?: QueryTeamsArgs[] | false, alias?: string  } 
  | { name: 'teamsConnection', args?: QueryTeamsConnectionArgs[] | false, alias?: string  } 
  | { name: 'baddie', args?: QueryBaddieArgs[] | false, alias?: string  } 
  | { name: 'baddies', args?: QueryBaddiesArgs[] | false, alias?: string  } 
  | { name: 'baddiesConnection', args?: QueryBaddiesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'hero'
  | 'heroes'
  | 'heroesConnection'
  | 'team'
  | 'teams'
  | 'teamsConnection'
  | 'baddie'
  | 'baddies'
  | 'baddiesConnection'


type QueryHeroArgs =
  | 'where'
type QueryHeroesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryHeroesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTeamArgs =
  | 'where'
type QueryTeamsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTeamsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBaddieArgs =
  | 'where'
type QueryBaddiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBaddiesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  hero: {
    type: 'Hero'
    args: Record<QueryHeroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: HeroWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero | null> | prisma.Hero | null
  }
  heroes: {
    type: 'Hero'
    args: Record<QueryHeroesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: HeroWhereInput | null, orderBy?: prisma.HeroOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero[]> | prisma.Hero[]
  }
  heroesConnection: {
    type: 'HeroConnection'
    args: Record<QueryHeroesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: HeroWhereInput | null, orderBy?: prisma.HeroOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HeroConnection> | prisma.HeroConnection
  }
  team: {
    type: 'Team'
    args: Record<QueryTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TeamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  teams: {
    type: 'Team'
    args: Record<QueryTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TeamWhereInput | null, orderBy?: prisma.TeamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team[]> | prisma.Team[]
  }
  teamsConnection: {
    type: 'TeamConnection'
    args: Record<QueryTeamsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TeamWhereInput | null, orderBy?: prisma.TeamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamConnection> | prisma.TeamConnection
  }
  baddie: {
    type: 'Baddie'
    args: Record<QueryBaddieArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: BaddieWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Baddie | null> | prisma.Baddie | null
  }
  baddies: {
    type: 'Baddie'
    args: Record<QueryBaddiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BaddieWhereInput | null, orderBy?: prisma.BaddieOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Baddie[]> | prisma.Baddie[]
  }
  baddiesConnection: {
    type: 'BaddieConnection'
    args: Record<QueryBaddiesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BaddieWhereInput | null, orderBy?: prisma.BaddieOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BaddieConnection> | prisma.BaddieConnection
  }
}
  

// Types for Hero

type HeroObject =
  | HeroFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'teams', args?: HeroTeamsArgs[] | false, alias?: string  } 
  | { name: 'powerLvl', args?: [] | false, alias?: string  } 
  | { name: 'HP', args?: [] | false, alias?: string  } 
  | { name: 'nemesis', args?: [] | false, alias?: string  } 

type HeroFields =
  | 'id'
  | 'name'
  | 'teams'
  | 'powerLvl'
  | 'HP'
  | 'nemesis'


type HeroTeamsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface HeroFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  teams: {
    type: 'Team'
    args: Record<HeroTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Hero">,
      args: { where?: TeamWhereInput | null, orderBy?: prisma.TeamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team[]> | prisma.Team[]
  }
  powerLvl: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  HP: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  nemesis: {
    type: 'Baddie'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Hero">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Baddie | null> | prisma.Baddie | null
  }
}
  

// Types for Team

type TeamObject =
  | TeamFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'members', args?: TeamMembersArgs[] | false, alias?: string  } 

type TeamFields =
  | 'id'
  | 'name'
  | 'members'


type TeamMembersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TeamFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  members: {
    type: 'Hero'
    args: Record<TeamMembersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Team">,
      args: { where?: HeroWhereInput | null, orderBy?: prisma.HeroOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero[]> | prisma.Hero[]
  }
}
  

// Types for Baddie

type BaddieObject =
  | BaddieFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'powerLvl', args?: [] | false, alias?: string  } 
  | { name: 'nemesis', args?: [] | false, alias?: string  } 
  | { name: 'HP', args?: [] | false, alias?: string  } 

type BaddieFields =
  | 'id'
  | 'name'
  | 'powerLvl'
  | 'nemesis'
  | 'HP'



  

export interface BaddieFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  powerLvl: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  nemesis: {
    type: 'Hero'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Baddie">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero | null> | prisma.Hero | null
  }
  HP: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for HeroConnection

type HeroConnectionObject =
  | HeroConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type HeroConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface HeroConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HeroConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'HeroEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"HeroConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HeroEdge[]> | prisma.HeroEdge[]
  }
  aggregate: {
    type: 'AggregateHero'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HeroConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateHero> | prisma.AggregateHero
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for HeroEdge

type HeroEdgeObject =
  | HeroEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type HeroEdgeFields =
  | 'node'
  | 'cursor'



  

export interface HeroEdgeFieldDetails {
  node: {
    type: 'Hero'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HeroEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero> | prisma.Hero
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateHero

type AggregateHeroObject =
  | AggregateHeroFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateHeroFields =
  | 'count'



  

export interface AggregateHeroFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TeamConnection

type TeamConnectionObject =
  | TeamConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TeamConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TeamConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TeamEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TeamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamEdge[]> | prisma.TeamEdge[]
  }
  aggregate: {
    type: 'AggregateTeam'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTeam> | prisma.AggregateTeam
  }
}
  

// Types for TeamEdge

type TeamEdgeObject =
  | TeamEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TeamEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TeamEdgeFieldDetails {
  node: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTeam

type AggregateTeamObject =
  | AggregateTeamFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTeamFields =
  | 'count'



  

export interface AggregateTeamFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BaddieConnection

type BaddieConnectionObject =
  | BaddieConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type BaddieConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface BaddieConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BaddieConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'BaddieEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"BaddieConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BaddieEdge[]> | prisma.BaddieEdge[]
  }
  aggregate: {
    type: 'AggregateBaddie'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BaddieConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateBaddie> | prisma.AggregateBaddie
  }
}
  

// Types for BaddieEdge

type BaddieEdgeObject =
  | BaddieEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type BaddieEdgeFields =
  | 'node'
  | 'cursor'



  

export interface BaddieEdgeFieldDetails {
  node: {
    type: 'Baddie'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BaddieEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Baddie> | prisma.Baddie
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateBaddie

type AggregateBaddieObject =
  | AggregateBaddieFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateBaddieFields =
  | 'count'



  

export interface AggregateBaddieFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createHero', args?: MutationCreateHeroArgs[] | false, alias?: string  } 
  | { name: 'updateHero', args?: MutationUpdateHeroArgs[] | false, alias?: string  } 
  | { name: 'updateManyHeroes', args?: MutationUpdateManyHeroesArgs[] | false, alias?: string  } 
  | { name: 'upsertHero', args?: MutationUpsertHeroArgs[] | false, alias?: string  } 
  | { name: 'deleteHero', args?: MutationDeleteHeroArgs[] | false, alias?: string  } 
  | { name: 'deleteManyHeroes', args?: MutationDeleteManyHeroesArgs[] | false, alias?: string  } 
  | { name: 'createTeam', args?: MutationCreateTeamArgs[] | false, alias?: string  } 
  | { name: 'updateTeam', args?: MutationUpdateTeamArgs[] | false, alias?: string  } 
  | { name: 'updateManyTeams', args?: MutationUpdateManyTeamsArgs[] | false, alias?: string  } 
  | { name: 'upsertTeam', args?: MutationUpsertTeamArgs[] | false, alias?: string  } 
  | { name: 'deleteTeam', args?: MutationDeleteTeamArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTeams', args?: MutationDeleteManyTeamsArgs[] | false, alias?: string  } 
  | { name: 'createBaddie', args?: MutationCreateBaddieArgs[] | false, alias?: string  } 
  | { name: 'updateBaddie', args?: MutationUpdateBaddieArgs[] | false, alias?: string  } 
  | { name: 'updateManyBaddies', args?: MutationUpdateManyBaddiesArgs[] | false, alias?: string  } 
  | { name: 'upsertBaddie', args?: MutationUpsertBaddieArgs[] | false, alias?: string  } 
  | { name: 'deleteBaddie', args?: MutationDeleteBaddieArgs[] | false, alias?: string  } 
  | { name: 'deleteManyBaddies', args?: MutationDeleteManyBaddiesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createHero'
  | 'updateHero'
  | 'updateManyHeroes'
  | 'upsertHero'
  | 'deleteHero'
  | 'deleteManyHeroes'
  | 'createTeam'
  | 'updateTeam'
  | 'updateManyTeams'
  | 'upsertTeam'
  | 'deleteTeam'
  | 'deleteManyTeams'
  | 'createBaddie'
  | 'updateBaddie'
  | 'updateManyBaddies'
  | 'upsertBaddie'
  | 'deleteBaddie'
  | 'deleteManyBaddies'


type MutationCreateHeroArgs =
  | 'data'
type MutationUpdateHeroArgs =
  | 'data'
  | 'where'
type MutationUpdateManyHeroesArgs =
  | 'data'
  | 'where'
type MutationUpsertHeroArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteHeroArgs =
  | 'where'
type MutationDeleteManyHeroesArgs =
  | 'where'
type MutationCreateTeamArgs =
  | 'data'
type MutationUpdateTeamArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTeamsArgs =
  | 'data'
  | 'where'
type MutationUpsertTeamArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTeamArgs =
  | 'where'
type MutationDeleteManyTeamsArgs =
  | 'where'
type MutationCreateBaddieArgs =
  | 'data'
type MutationUpdateBaddieArgs =
  | 'data'
  | 'where'
type MutationUpdateManyBaddiesArgs =
  | 'data'
  | 'where'
type MutationUpsertBaddieArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteBaddieArgs =
  | 'where'
type MutationDeleteManyBaddiesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createHero: {
    type: 'Hero'
    args: Record<MutationCreateHeroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HeroCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero> | prisma.Hero
  }
  updateHero: {
    type: 'Hero'
    args: Record<MutationUpdateHeroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HeroUpdateInput, where: HeroWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero | null> | prisma.Hero | null
  }
  updateManyHeroes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyHeroesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HeroUpdateManyMutationInput, where?: HeroWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertHero: {
    type: 'Hero'
    args: Record<MutationUpsertHeroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: HeroWhereUniqueInput, create: HeroCreateInput, update: HeroUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero> | prisma.Hero
  }
  deleteHero: {
    type: 'Hero'
    args: Record<MutationDeleteHeroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: HeroWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero | null> | prisma.Hero | null
  }
  deleteManyHeroes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyHeroesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: HeroWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTeam: {
    type: 'Team'
    args: Record<MutationCreateTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  updateTeam: {
    type: 'Team'
    args: Record<MutationUpdateTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamUpdateInput, where: TeamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  updateManyTeams: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamUpdateManyMutationInput, where?: TeamWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTeam: {
    type: 'Team'
    args: Record<MutationUpsertTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TeamWhereUniqueInput, create: TeamCreateInput, update: TeamUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  deleteTeam: {
    type: 'Team'
    args: Record<MutationDeleteTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TeamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  deleteManyTeams: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TeamWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createBaddie: {
    type: 'Baddie'
    args: Record<MutationCreateBaddieArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BaddieCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Baddie> | prisma.Baddie
  }
  updateBaddie: {
    type: 'Baddie'
    args: Record<MutationUpdateBaddieArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BaddieUpdateInput, where: BaddieWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Baddie | null> | prisma.Baddie | null
  }
  updateManyBaddies: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyBaddiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BaddieUpdateManyMutationInput, where?: BaddieWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertBaddie: {
    type: 'Baddie'
    args: Record<MutationUpsertBaddieArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BaddieWhereUniqueInput, create: BaddieCreateInput, update: BaddieUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Baddie> | prisma.Baddie
  }
  deleteBaddie: {
    type: 'Baddie'
    args: Record<MutationDeleteBaddieArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BaddieWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Baddie | null> | prisma.Baddie | null
  }
  deleteManyBaddies: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyBaddiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: BaddieWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'hero', args?: SubscriptionHeroArgs[] | false, alias?: string  } 
  | { name: 'team', args?: SubscriptionTeamArgs[] | false, alias?: string  } 
  | { name: 'baddie', args?: SubscriptionBaddieArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'hero'
  | 'team'
  | 'baddie'


type SubscriptionHeroArgs =
  | 'where'
type SubscriptionTeamArgs =
  | 'where'
type SubscriptionBaddieArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  hero: {
    type: 'HeroSubscriptionPayload'
    args: Record<SubscriptionHeroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: HeroSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HeroSubscriptionPayload | null> | prisma.HeroSubscriptionPayload | null
  }
  team: {
    type: 'TeamSubscriptionPayload'
    args: Record<SubscriptionTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TeamSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamSubscriptionPayload | null> | prisma.TeamSubscriptionPayload | null
  }
  baddie: {
    type: 'BaddieSubscriptionPayload'
    args: Record<SubscriptionBaddieArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: BaddieSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BaddieSubscriptionPayload | null> | prisma.BaddieSubscriptionPayload | null
  }
}
  

// Types for HeroSubscriptionPayload

type HeroSubscriptionPayloadObject =
  | HeroSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type HeroSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface HeroSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HeroSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Hero'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HeroSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Hero | null> | prisma.Hero | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'HeroPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HeroSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HeroPreviousValues | null> | prisma.HeroPreviousValues | null
  }
}
  

// Types for HeroPreviousValues

type HeroPreviousValuesObject =
  | HeroPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'powerLvl', args?: [] | false, alias?: string  } 
  | { name: 'HP', args?: [] | false, alias?: string  } 

type HeroPreviousValuesFields =
  | 'id'
  | 'name'
  | 'powerLvl'
  | 'HP'



  

export interface HeroPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  powerLvl: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  HP: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TeamSubscriptionPayload

type TeamSubscriptionPayloadObject =
  | TeamSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TeamSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TeamSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TeamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TeamPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TeamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPreviousValues | null> | prisma.TeamPreviousValues | null
  }
}
  

// Types for TeamPreviousValues

type TeamPreviousValuesObject =
  | TeamPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type TeamPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface TeamPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BaddieSubscriptionPayload

type BaddieSubscriptionPayloadObject =
  | BaddieSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type BaddieSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface BaddieSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BaddieSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Baddie'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BaddieSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Baddie | null> | prisma.Baddie | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'BaddiePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BaddieSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BaddiePreviousValues | null> | prisma.BaddiePreviousValues | null
  }
}
  

// Types for BaddiePreviousValues

type BaddiePreviousValuesObject =
  | BaddiePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'powerLvl', args?: [] | false, alias?: string  } 
  | { name: 'HP', args?: [] | false, alias?: string  } 

type BaddiePreviousValuesFields =
  | 'id'
  | 'name'
  | 'powerLvl'
  | 'HP'



  

export interface BaddiePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  powerLvl: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  HP: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface HeroWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type HeroWhereUniqueInputInputObject =
  | Extract<keyof HeroWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface TeamWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  members_every?: HeroWhereInput | null
  members_some?: HeroWhereInput | null
  members_none?: HeroWhereInput | null
  AND?: TeamWhereInput[]
  OR?: TeamWhereInput[]
  NOT?: TeamWhereInput[]
}
export type TeamWhereInputInputObject =
  | Extract<keyof TeamWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'members_every', alias?: string  } 
  | { name: 'members_some', alias?: string  } 
  | { name: 'members_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface HeroWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  teams_every?: TeamWhereInput | null
  teams_some?: TeamWhereInput | null
  teams_none?: TeamWhereInput | null
  powerLvl?: number | null
  powerLvl_not?: number | null
  powerLvl_in?: number[]
  powerLvl_not_in?: number[]
  powerLvl_lt?: number | null
  powerLvl_lte?: number | null
  powerLvl_gt?: number | null
  powerLvl_gte?: number | null
  HP?: number | null
  HP_not?: number | null
  HP_in?: number[]
  HP_not_in?: number[]
  HP_lt?: number | null
  HP_lte?: number | null
  HP_gt?: number | null
  HP_gte?: number | null
  nemesis?: BaddieWhereInput | null
  AND?: HeroWhereInput[]
  OR?: HeroWhereInput[]
  NOT?: HeroWhereInput[]
}
export type HeroWhereInputInputObject =
  | Extract<keyof HeroWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'teams_every', alias?: string  } 
  | { name: 'teams_some', alias?: string  } 
  | { name: 'teams_none', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'powerLvl_not', alias?: string  } 
  | { name: 'powerLvl_in', alias?: string  } 
  | { name: 'powerLvl_not_in', alias?: string  } 
  | { name: 'powerLvl_lt', alias?: string  } 
  | { name: 'powerLvl_lte', alias?: string  } 
  | { name: 'powerLvl_gt', alias?: string  } 
  | { name: 'powerLvl_gte', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  | { name: 'HP_not', alias?: string  } 
  | { name: 'HP_in', alias?: string  } 
  | { name: 'HP_not_in', alias?: string  } 
  | { name: 'HP_lt', alias?: string  } 
  | { name: 'HP_lte', alias?: string  } 
  | { name: 'HP_gt', alias?: string  } 
  | { name: 'HP_gte', alias?: string  } 
  | { name: 'nemesis', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BaddieWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  powerLvl?: number | null
  powerLvl_not?: number | null
  powerLvl_in?: number[]
  powerLvl_not_in?: number[]
  powerLvl_lt?: number | null
  powerLvl_lte?: number | null
  powerLvl_gt?: number | null
  powerLvl_gte?: number | null
  nemesis?: HeroWhereInput | null
  HP?: number | null
  HP_not?: number | null
  HP_in?: number[]
  HP_not_in?: number[]
  HP_lt?: number | null
  HP_lte?: number | null
  HP_gt?: number | null
  HP_gte?: number | null
  AND?: BaddieWhereInput[]
  OR?: BaddieWhereInput[]
  NOT?: BaddieWhereInput[]
}
export type BaddieWhereInputInputObject =
  | Extract<keyof BaddieWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'powerLvl_not', alias?: string  } 
  | { name: 'powerLvl_in', alias?: string  } 
  | { name: 'powerLvl_not_in', alias?: string  } 
  | { name: 'powerLvl_lt', alias?: string  } 
  | { name: 'powerLvl_lte', alias?: string  } 
  | { name: 'powerLvl_gt', alias?: string  } 
  | { name: 'powerLvl_gte', alias?: string  } 
  | { name: 'nemesis', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  | { name: 'HP_not', alias?: string  } 
  | { name: 'HP_in', alias?: string  } 
  | { name: 'HP_not_in', alias?: string  } 
  | { name: 'HP_lt', alias?: string  } 
  | { name: 'HP_lte', alias?: string  } 
  | { name: 'HP_gt', alias?: string  } 
  | { name: 'HP_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TeamWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type TeamWhereUniqueInputInputObject =
  | Extract<keyof TeamWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface BaddieWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type BaddieWhereUniqueInputInputObject =
  | Extract<keyof BaddieWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface HeroCreateInput {
  name?: string
  teams?: TeamCreateManyWithoutMembersInput | null
  powerLvl?: number
  HP?: number
  nemesis?: BaddieCreateOneWithoutNemesisInput | null
}
export type HeroCreateInputInputObject =
  | Extract<keyof HeroCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'teams', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  | { name: 'nemesis', alias?: string  } 
  
export interface TeamCreateManyWithoutMembersInput {
  create?: TeamCreateWithoutMembersInput[]
  connect?: TeamWhereUniqueInput[]
}
export type TeamCreateManyWithoutMembersInputInputObject =
  | Extract<keyof TeamCreateManyWithoutMembersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TeamCreateWithoutMembersInput {
  name?: string
}
export type TeamCreateWithoutMembersInputInputObject =
  | Extract<keyof TeamCreateWithoutMembersInput, string>
  | { name: 'name', alias?: string  } 
  
export interface BaddieCreateOneWithoutNemesisInput {
  create?: BaddieCreateWithoutNemesisInput | null
  connect?: BaddieWhereUniqueInput | null
}
export type BaddieCreateOneWithoutNemesisInputInputObject =
  | Extract<keyof BaddieCreateOneWithoutNemesisInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BaddieCreateWithoutNemesisInput {
  name?: string
  powerLvl?: number
  HP?: number
}
export type BaddieCreateWithoutNemesisInputInputObject =
  | Extract<keyof BaddieCreateWithoutNemesisInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  
export interface HeroUpdateInput {
  name?: string | null
  teams?: TeamUpdateManyWithoutMembersInput | null
  powerLvl?: number | null
  HP?: number | null
  nemesis?: BaddieUpdateOneWithoutNemesisInput | null
}
export type HeroUpdateInputInputObject =
  | Extract<keyof HeroUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'teams', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  | { name: 'nemesis', alias?: string  } 
  
export interface TeamUpdateManyWithoutMembersInput {
  create?: TeamCreateWithoutMembersInput[]
  delete?: TeamWhereUniqueInput[]
  connect?: TeamWhereUniqueInput[]
  set?: TeamWhereUniqueInput[]
  disconnect?: TeamWhereUniqueInput[]
  update?: TeamUpdateWithWhereUniqueWithoutMembersInput[]
  upsert?: TeamUpsertWithWhereUniqueWithoutMembersInput[]
  deleteMany?: TeamScalarWhereInput[]
  updateMany?: TeamUpdateManyWithWhereNestedInput[]
}
export type TeamUpdateManyWithoutMembersInputInputObject =
  | Extract<keyof TeamUpdateManyWithoutMembersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface TeamUpdateWithWhereUniqueWithoutMembersInput {
  where?: TeamWhereUniqueInput
  data?: TeamUpdateWithoutMembersDataInput
}
export type TeamUpdateWithWhereUniqueWithoutMembersInputInputObject =
  | Extract<keyof TeamUpdateWithWhereUniqueWithoutMembersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TeamUpdateWithoutMembersDataInput {
  name?: string | null
}
export type TeamUpdateWithoutMembersDataInputInputObject =
  | Extract<keyof TeamUpdateWithoutMembersDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface TeamUpsertWithWhereUniqueWithoutMembersInput {
  where?: TeamWhereUniqueInput
  update?: TeamUpdateWithoutMembersDataInput
  create?: TeamCreateWithoutMembersInput
}
export type TeamUpsertWithWhereUniqueWithoutMembersInputInputObject =
  | Extract<keyof TeamUpsertWithWhereUniqueWithoutMembersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TeamScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: TeamScalarWhereInput[]
  OR?: TeamScalarWhereInput[]
  NOT?: TeamScalarWhereInput[]
}
export type TeamScalarWhereInputInputObject =
  | Extract<keyof TeamScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TeamUpdateManyWithWhereNestedInput {
  where?: TeamScalarWhereInput
  data?: TeamUpdateManyDataInput
}
export type TeamUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof TeamUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TeamUpdateManyDataInput {
  name?: string | null
}
export type TeamUpdateManyDataInputInputObject =
  | Extract<keyof TeamUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface BaddieUpdateOneWithoutNemesisInput {
  create?: BaddieCreateWithoutNemesisInput | null
  update?: BaddieUpdateWithoutNemesisDataInput | null
  upsert?: BaddieUpsertWithoutNemesisInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: BaddieWhereUniqueInput | null
}
export type BaddieUpdateOneWithoutNemesisInputInputObject =
  | Extract<keyof BaddieUpdateOneWithoutNemesisInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BaddieUpdateWithoutNemesisDataInput {
  name?: string | null
  powerLvl?: number | null
  HP?: number | null
}
export type BaddieUpdateWithoutNemesisDataInputInputObject =
  | Extract<keyof BaddieUpdateWithoutNemesisDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  
export interface BaddieUpsertWithoutNemesisInput {
  update?: BaddieUpdateWithoutNemesisDataInput
  create?: BaddieCreateWithoutNemesisInput
}
export type BaddieUpsertWithoutNemesisInputInputObject =
  | Extract<keyof BaddieUpsertWithoutNemesisInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface HeroUpdateManyMutationInput {
  name?: string | null
  powerLvl?: number | null
  HP?: number | null
}
export type HeroUpdateManyMutationInputInputObject =
  | Extract<keyof HeroUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  
export interface TeamCreateInput {
  name?: string
  members?: HeroCreateManyWithoutTeamsInput | null
}
export type TeamCreateInputInputObject =
  | Extract<keyof TeamCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'members', alias?: string  } 
  
export interface HeroCreateManyWithoutTeamsInput {
  create?: HeroCreateWithoutTeamsInput[]
  connect?: HeroWhereUniqueInput[]
}
export type HeroCreateManyWithoutTeamsInputInputObject =
  | Extract<keyof HeroCreateManyWithoutTeamsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface HeroCreateWithoutTeamsInput {
  name?: string
  powerLvl?: number
  HP?: number
  nemesis?: BaddieCreateOneWithoutNemesisInput | null
}
export type HeroCreateWithoutTeamsInputInputObject =
  | Extract<keyof HeroCreateWithoutTeamsInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  | { name: 'nemesis', alias?: string  } 
  
export interface TeamUpdateInput {
  name?: string | null
  members?: HeroUpdateManyWithoutTeamsInput | null
}
export type TeamUpdateInputInputObject =
  | Extract<keyof TeamUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'members', alias?: string  } 
  
export interface HeroUpdateManyWithoutTeamsInput {
  create?: HeroCreateWithoutTeamsInput[]
  delete?: HeroWhereUniqueInput[]
  connect?: HeroWhereUniqueInput[]
  set?: HeroWhereUniqueInput[]
  disconnect?: HeroWhereUniqueInput[]
  update?: HeroUpdateWithWhereUniqueWithoutTeamsInput[]
  upsert?: HeroUpsertWithWhereUniqueWithoutTeamsInput[]
  deleteMany?: HeroScalarWhereInput[]
  updateMany?: HeroUpdateManyWithWhereNestedInput[]
}
export type HeroUpdateManyWithoutTeamsInputInputObject =
  | Extract<keyof HeroUpdateManyWithoutTeamsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface HeroUpdateWithWhereUniqueWithoutTeamsInput {
  where?: HeroWhereUniqueInput
  data?: HeroUpdateWithoutTeamsDataInput
}
export type HeroUpdateWithWhereUniqueWithoutTeamsInputInputObject =
  | Extract<keyof HeroUpdateWithWhereUniqueWithoutTeamsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface HeroUpdateWithoutTeamsDataInput {
  name?: string | null
  powerLvl?: number | null
  HP?: number | null
  nemesis?: BaddieUpdateOneWithoutNemesisInput | null
}
export type HeroUpdateWithoutTeamsDataInputInputObject =
  | Extract<keyof HeroUpdateWithoutTeamsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  | { name: 'nemesis', alias?: string  } 
  
export interface HeroUpsertWithWhereUniqueWithoutTeamsInput {
  where?: HeroWhereUniqueInput
  update?: HeroUpdateWithoutTeamsDataInput
  create?: HeroCreateWithoutTeamsInput
}
export type HeroUpsertWithWhereUniqueWithoutTeamsInputInputObject =
  | Extract<keyof HeroUpsertWithWhereUniqueWithoutTeamsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface HeroScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  powerLvl?: number | null
  powerLvl_not?: number | null
  powerLvl_in?: number[]
  powerLvl_not_in?: number[]
  powerLvl_lt?: number | null
  powerLvl_lte?: number | null
  powerLvl_gt?: number | null
  powerLvl_gte?: number | null
  HP?: number | null
  HP_not?: number | null
  HP_in?: number[]
  HP_not_in?: number[]
  HP_lt?: number | null
  HP_lte?: number | null
  HP_gt?: number | null
  HP_gte?: number | null
  AND?: HeroScalarWhereInput[]
  OR?: HeroScalarWhereInput[]
  NOT?: HeroScalarWhereInput[]
}
export type HeroScalarWhereInputInputObject =
  | Extract<keyof HeroScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'powerLvl_not', alias?: string  } 
  | { name: 'powerLvl_in', alias?: string  } 
  | { name: 'powerLvl_not_in', alias?: string  } 
  | { name: 'powerLvl_lt', alias?: string  } 
  | { name: 'powerLvl_lte', alias?: string  } 
  | { name: 'powerLvl_gt', alias?: string  } 
  | { name: 'powerLvl_gte', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  | { name: 'HP_not', alias?: string  } 
  | { name: 'HP_in', alias?: string  } 
  | { name: 'HP_not_in', alias?: string  } 
  | { name: 'HP_lt', alias?: string  } 
  | { name: 'HP_lte', alias?: string  } 
  | { name: 'HP_gt', alias?: string  } 
  | { name: 'HP_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface HeroUpdateManyWithWhereNestedInput {
  where?: HeroScalarWhereInput
  data?: HeroUpdateManyDataInput
}
export type HeroUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof HeroUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface HeroUpdateManyDataInput {
  name?: string | null
  powerLvl?: number | null
  HP?: number | null
}
export type HeroUpdateManyDataInputInputObject =
  | Extract<keyof HeroUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  
export interface TeamUpdateManyMutationInput {
  name?: string | null
}
export type TeamUpdateManyMutationInputInputObject =
  | Extract<keyof TeamUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface BaddieCreateInput {
  name?: string
  powerLvl?: number
  nemesis?: HeroCreateOneWithoutNemesisInput | null
  HP?: number
}
export type BaddieCreateInputInputObject =
  | Extract<keyof BaddieCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'nemesis', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  
export interface HeroCreateOneWithoutNemesisInput {
  create?: HeroCreateWithoutNemesisInput | null
  connect?: HeroWhereUniqueInput | null
}
export type HeroCreateOneWithoutNemesisInputInputObject =
  | Extract<keyof HeroCreateOneWithoutNemesisInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface HeroCreateWithoutNemesisInput {
  name?: string
  teams?: TeamCreateManyWithoutMembersInput | null
  powerLvl?: number
  HP?: number
}
export type HeroCreateWithoutNemesisInputInputObject =
  | Extract<keyof HeroCreateWithoutNemesisInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'teams', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  
export interface BaddieUpdateInput {
  name?: string | null
  powerLvl?: number | null
  nemesis?: HeroUpdateOneWithoutNemesisInput | null
  HP?: number | null
}
export type BaddieUpdateInputInputObject =
  | Extract<keyof BaddieUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'nemesis', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  
export interface HeroUpdateOneWithoutNemesisInput {
  create?: HeroCreateWithoutNemesisInput | null
  update?: HeroUpdateWithoutNemesisDataInput | null
  upsert?: HeroUpsertWithoutNemesisInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: HeroWhereUniqueInput | null
}
export type HeroUpdateOneWithoutNemesisInputInputObject =
  | Extract<keyof HeroUpdateOneWithoutNemesisInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface HeroUpdateWithoutNemesisDataInput {
  name?: string | null
  teams?: TeamUpdateManyWithoutMembersInput | null
  powerLvl?: number | null
  HP?: number | null
}
export type HeroUpdateWithoutNemesisDataInputInputObject =
  | Extract<keyof HeroUpdateWithoutNemesisDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'teams', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  
export interface HeroUpsertWithoutNemesisInput {
  update?: HeroUpdateWithoutNemesisDataInput
  create?: HeroCreateWithoutNemesisInput
}
export type HeroUpsertWithoutNemesisInputInputObject =
  | Extract<keyof HeroUpsertWithoutNemesisInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface BaddieUpdateManyMutationInput {
  name?: string | null
  powerLvl?: number | null
  HP?: number | null
}
export type BaddieUpdateManyMutationInputInputObject =
  | Extract<keyof BaddieUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'powerLvl', alias?: string  } 
  | { name: 'HP', alias?: string  } 
  
export interface HeroSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: HeroWhereInput | null
  AND?: HeroSubscriptionWhereInput[]
  OR?: HeroSubscriptionWhereInput[]
  NOT?: HeroSubscriptionWhereInput[]
}
export type HeroSubscriptionWhereInputInputObject =
  | Extract<keyof HeroSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TeamSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TeamWhereInput | null
  AND?: TeamSubscriptionWhereInput[]
  OR?: TeamSubscriptionWhereInput[]
  NOT?: TeamSubscriptionWhereInput[]
}
export type TeamSubscriptionWhereInputInputObject =
  | Extract<keyof TeamSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BaddieSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: BaddieWhereInput | null
  AND?: BaddieSubscriptionWhereInput[]
  OR?: BaddieSubscriptionWhereInput[]
  NOT?: BaddieSubscriptionWhereInput[]
}
export type BaddieSubscriptionWhereInputInputObject =
  | Extract<keyof BaddieSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type TeamOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type HeroOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'powerLvl_ASC'
  | 'powerLvl_DESC'
  | 'HP_ASC'
  | 'HP_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type BaddieOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'powerLvl_ASC'
  | 'powerLvl_DESC'
  | 'HP_ASC'
  | 'HP_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  